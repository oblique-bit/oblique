{
  "$schema": "../../../schema.json",
  "api": [
    {
      "name": "ObGlobalEventsService",
      "usage": "This service serves as a single entry point for global events, so that there is only 1 registered listener per event.",
      "type": "service",
      "since": "6.1.0",
      "updated": "8.1.0",
      "variables": [
        {
          "name": "beforeUnload$",
          "text": "Emits before the page is unloaded.",
          "type": "Observable<BeforeUnloadEvent>",
          "since": "8.1.0"
        },
        {
          "name": "click$",
          "text": "Emits when the mouse's left button is clicked.",
          "type": "Observable<MouseEvent>",
          "since": "6.1.0"
        },
        {
          "name": "mouseDown$",
          "text": "Emits when any mouse button is pressed and before it is released.",
          "type": "Observable<MouseEvent>",
          "since": "6.1.0"
        },
        {
          "name": "mouseMove$",
          "text": "Emits the mouse moves.",
          "type": "Observable<MouseEvent>",
          "since": "6.1.0"
        },
        {
          "name": "keyDown$",
          "text": "Emits when any key is pressed and before it is released.",
          "type": "Observable<KeyboardEvent>",
          "since": "6.1.0"
        },
        {
          "name": "keyUp$",
          "text": "Emits when any key is released.",
          "type": "Observable<KeyboardEvent>",
          "since": "6.1.0"
        },
        {
          "name": "scroll$",
          "text": "Emits when the <code>Document</code> is scrolled.",
          "type": "Observable<Event>",
          "since": "6.1.0"
        },
        {
          "name": "wheel$",
          "text": "Emits when the <code>Window</code> detects the user rotates a wheel button.",
          "type": "Observable<Event>",
          "since": "10.2.0"
        },
        {
          "name": "resize$",
          "text": "Emits when the <code>Window</code> is resized.",
          "type": "Observable<UIEvent>",
          "since": "6.1.0"
        }
      ]
    },
    {
      "name": "obOutsideFilter",
      "type": "function",
      "usage": "This function is a custom rxjs operator and is meant to be used with <code>ObGlobalEventsService</code> mouse and keyboard events: <code>obGlobalEventsService.click$.pipe(obOutsideFilter(HTMLElement))</code>",
      "since": "6.1.0",
      "methods": [
        {
          "name": "obOutsideFilter",
          "text": "Filters out events whose target is one of the provided elements or their descendents",
          "since": "6.1.0",
          "returns": "Observable<Event>",
          "arguments": ["...elements: HTMLElement[]"]
        }
      ]
    }
  ]
}
