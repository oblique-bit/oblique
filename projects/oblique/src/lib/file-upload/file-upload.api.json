{
  "$schema": "../../../schema.json",
  "api": [
    {
      "name": "ObFileUploadComponent",
      "usage": "The component can simply be embedded in a template.",
      "selector": "ob-file-upload",
      "exported": "obFileUpload",
      "type": "component",
      "since": "7.1.0",
      "inputs": [
        {
          "name": "accept",
          "text": "The allowed file extensions and/or mime types. Non matching files will be filtered out.",
          "type": "string[]",
          "default": "['*']",
          "since": "7.1.0"
        },
        {
          "name": "maxFileSize",
          "text": "Maximum file size in Mb.",
          "type": "number",
          "default": "5",
          "since": "7.1.0"
        },
        {
          "name": "multiple",
          "text": "Whether or not the component can upload multiple files. If disabled, subsequent files will be filtered out.",
          "type": "boolean",
          "default": "true",
          "since": "7.1.0"
        },
        {
          "name": "singleRequest",
          "text": "Whether to upload all files through a single HTTP request or to use one per file. There will be one progressbar per HTTP request.",
          "type": "boolean",
          "default": "true",
          "since": "7.1.0"
        },
        {
          "name": "uploadUrl",
          "text": "The POST API endpoint that will be called with the files attached. If not provided, no file will be uploaded",
          "type": "string",
          "since": "7.1.0"
        }
      ],
      "outputs": [
        {
          "name": "uploadEvent",
          "text": "Emits when files are chosen, uploaded, canceled or errored.",
          "type": "Observable<ObIUploadEvent>",
          "since": "7.1.0"
        }
      ],
      "methods": [
        {
          "name": "processEvent",
          "text": "Notifies the component of an upload event. It triggers the <code>uploadEvent</code> event emitter with the received event. Events of type <code>ObIUploadEvent.UPLOADED</code> also reset the component.",
          "arguments": ["event: ObIUploadEvent"],
          "returns": "void",
          "since": "7.1.0"
        }
      ]
    },
    {
      "name": "ObIFileDescription",
      "usage": "This interface describes the files that are loaded from the server.",
      "type": "interface",
      "since": "7.1.0",
      "variables": [
        {
          "name": "name",
          "text": "The name of the file. It serves as an identifier",
          "type": "string",
          "since": "7.1.0"
        },
        {
          "name": "[key: string]",
          "text": "Any other option that the server provides.",
          "type": "any",
          "since": "7.1.0"
        }
      ]
    },
    {
      "name": "ObIUploadEvent",
      "usage": "This interface describes the events that are emitted to inform about the upload feature status.",
      "type": "interface",
      "since": "7.1.0",
      "variables": [
        {
          "name": "files",
          "text": "The list of <code>File</code>s or file names concerned by the event's type.",
          "type": "File[] | string[]",
          "since": "7.1.0"
        },
        {
          "name": "type",
          "text": "The event's type.",
          "type": "ObEUploadEventType",
          "since": "7.1.0"
        },
        {
          "name": "error",
          "text": "The HTTP error if any.",
          "type": "HttpErrorResponse",
          "isOptional": true,
          "since": "7.1.0"
        }
      ]
    },
    {
      "name": "ObDropZoneComponent",
      "usage": "An alternative to <code>ob-file-upload</code> for a manual handling of the upload.",
      "selector": "ob-drop-zone",
      "exported": "obDropZone",
      "type": "component",
      "since": "7.1.0",
      "inputs": [
        {
          "name": "accept",
          "text": "The allowed file extensions and/or mime types. Non matching files will be filtered out.",
          "type": "string[]",
          "default": "['*']",
          "since": "7.1.0"
        },
        {
          "name": "maxFileSize",
          "text": "Maximum file size in Mb.",
          "type": "number",
          "default": "5",
          "since": "7.1.0"
        },
        {
          "name": "multiple",
          "text": "Whether or not the component can upload multiple files. If disabled, subsequent files will be filtered out.",
          "type": "boolean",
          "default": "true",
          "since": "7.1.0"
        }
      ],
      "outputs": [
        {
          "name": "uploadEvent",
          "text": "Emits when files are chosen or errored.",
          "type": "Observable<ObIUploadEvent>",
          "since": "7.1.0"
        }
      ],
      "methods": [
        {
          "name": "addFiles",
          "text": "Can be used to programmatically upload files. It will trigger the <code>uploadEvent</code> event emitter.",
          "arguments": ["fileList: FileList"],
          "returns": "void",
          "since": "7.1.0"
        }
      ]
    },
    {
      "name": "ObFileInfoComponent",
      "usage": "This component can simply be embedded in a template to show a list of uploaded files. It can be used independently of either <code>ob-file-upload</code> or <code>ob-drop-zone</code>.",
      "selector": "ob-file-info",
      "exported": "obFileInfo",
      "type": "component",
      "since": "7.1.0",
      "inputs": [
        {
          "name": "deleteUrl",
          "text": "The DELETE API endpoint that will be called with a serialized list of file names.",
          "type": "string",
          "default": "undefined",
          "since": "7.1.0"
        },
        {
          "name": "getUploadedFilesUrl",
          "text": "The GET API endpoint that will be called to get the already uploaded files. Files are expected as an array of objects containing at least a <code>name</code> property.",
          "type": "string",
          "default": "undefined",
          "since": "7.1.0"
        },
        {
          "name": "mapFunction",
          "text": "A rxjs <code>map</code> function that will be applied to the list of already uploaded files.",
          "type": "(files: ObIFileDescription[]) => ObIFileDescription[]",
          "default": "(files: ObIFileDescription[]): ObIFileDescription[] => files",
          "since": "7.1.0"
        }
      ],
      "outputs": [
        {
          "name": "uploadEvent",
          "text": "Emits when files are selected or deleted.",
          "type": "Observable<ObIUploadEvent>",
          "since": "7.1.0"
        }
      ],
      "methods": [
        {
          "name": "delete",
          "text": "Sends a DELETE HTTP request to the deleteUrl with the serialized file names appended. If the request is successful, the items are removed from the table.",
          "arguments": ["files: ObIFileDescription[]"],
          "returns": "void",
          "since": "7.1.0"
        },
        {
          "name": "selectOrUnselectAllItems",
          "text": "Unselects all items if all are currently selected. Selects all of them otherwise.",
          "arguments": [],
          "returns": "void",
          "since": "7.1.0"
        },
        {
          "name": "toggle",
          "text": "Toggles the given item selection.",
          "arguments": ["row: ObIFileDescription"],
          "returns": "void",
          "since": "7.1.0"
        }
      ]
    },
    {
      "name": "ObFileUploadService",
      "usage": "The service that handles file management.",
      "type": "injectable(other)",
      "since": "7.1.0",
      "variables": [
        {
          "name": "uploadComplete$",
          "text": "An observable that emits when an upload is completed",
          "type": "Observable<void>",
          "since": "7.1.0"
        }
      ],
      "methods": [
        {
          "name": "delete",
          "text": "Sends a DELETE HTTP request with a serialized array of file names.",
          "arguments": ["deleteUrl: string", "files: string[]"],
          "returns": "Observable<any>",
          "since": "7.1.0"
        },
        {
          "name": "getUploadedFiles",
          "text": "Loads a list of files with a GET HTTP request. The result is expected to be a list of objects with at least a <code>name</code> property.",
          "arguments": ["getUploadedFilesUrl: string"],
          "returns": "Observable<ObIFileDescription[]>",
          "since": "7.1.0"
        },
        {
          "name": "multiUpload",
          "text": "Uploads multiple files with one HTTP POST request. Event type <code>User</code> denotes an error.",
          "arguments": ["uploadUrl: string", "files: File[]"],
          "returns": "Observable<HttpEvent<HttpEventType.UploadProgress | HttpEventType.Response | HttpEventType.User>>",
          "since": "7.1.0"
        },
        {
          "name": "notifyUploadComplete",
          "text": "Emits the <code>uploadComplete</code> observable.",
          "arguments": [],
          "returns": "void",
          "since": "7.1.0"
        },
        {
          "name": "upload",
          "text": "Uploads one file with one HTTP POST request. Event type <code>User</code> denotes an error.",
          "arguments": ["uploadUrl: string", "file: File"],
          "returns": "Observable<HttpEvent<HttpEventType.UploadProgress | HttpEventType.Response | HttpEventType.User>>",
          "since": "7.1.0"
        }
      ]
    }
  ]
}
